version: '3.8'

services:
  # Serviciul Backend (Node.js + GraphQL)
  server:
    build:
      context: ./server/src
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    volumes:
      - ./server/src:/usr/src/app/src
    environment:
      NODE_ENV: development
      PORT: 4000
      MONGO_URI: mongodb://mongo_db:27017/eco_travel_planner # Conectare la containerul mongo_db
      JWT_SECRET: ${JWT_SECRET} # Va fi preluat din .env de la rădăcină
    depends_on:
      - mongo_db # Asigură-te că MongoDB pornește înainte de server
    networks:
      - app-network

  # Serviciul MongoDB (AICI ESTE DEFINIȚIA PENTRU MONGO)
  mongo_db: # Numele serviciului (folosit în MONGO_URI de mai sus)
    image: mongo:6.0 # Imaginea Docker MongoDB de pe Docker Hub (ex: versiunea 6.0)
                     # Docker o va descărca automat dacă nu o ai local
    ports:
      - "27017:27017" # Mapează portul containerului la portul mașinii tale host
                     # Permite accesul la MongoDB din exteriorul containerului (ex: cu MongoDB Compass)
    volumes:
      - mongo-data:/data/db # Persistă datele MongoDB într-un volum Docker numit 'mongo-data'
                            # Datele vor supraviețui opririi/ștergerii containerului
    networks:
      - app-network
    restart: unless-stopped # Opțional: repornește containerul dacă se oprește (ex: la reboot)

# Definește volumele externe (pentru persistență)
volumes:
  mongo-data:
    driver: local

# Definește rețeaua custom
networks:
  app-network:
    driver: bridge